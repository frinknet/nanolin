#!/bin/sh

alias runlock="$0"

ACT="$1"
LOCK="$2"
TIME="$3"

shift
shift

# show usage if we don't have a lock
[ -z "$LOCK" ] && echo "$NLHDR

	Handle runlock conditions.

    Usage:
	
	${NLBIN##*/} lock new <lock> [values]
	${NLBIN##*/} lock set <lock> [values]
	${NLBIN##*/} lock add <lock> [values]
	${NLBIN##*/} lock get <lock> [waittime]
	${NLBIN##*/} lock del <lock>
	${NLBIN##*/} lock has <lock>
	${NLBIN##*/} lock not <lock>
	${NLBIN##*/} lock wait <lock>
	${NLBIN##*/} lock time <lock>
" && exit

# make sure we have a runlock dir
export NLRLK="${NLRLK:-/run/lock}"

# get a specific runlock file for usecase
RUNLOCK="$NLRLK/${NLBIN##*/}-$LOCK.$USER"

pidwait() {
	[ -z "$1" ] && return

	for PID in $@; do
		while kill -0 $PID &>/dev/null; do
			usleep 5000
		done
	done
}

# case for various modes
case "$ACT" in
	# add a new runlock
	new) echo $@ > "$RUNLOCK";;
	# set the value of the runlock
	set) [ -e "$RUNLOCK" ] && echo $@ > "$RUNLOCK";;
	# append values to the runlock
	add) [ -e "$RUNLOCK" ] && echo $@ >> "$RUNLOCK";;
	# get a runlock with optional waitime
	get)
		CNT=$((20 * ${TIME:-0}))

		while [ ! -e "$RUNLOCK" ]; do
			[ $((CNT--)) -le 0 ] && break

			usleep 50000
		done

		[ -e "$RUNLOCK" ] && cat "$RUNLOCK";;
	# remove a runlock
	del) [ -e "$RUNLOCK" ] && rm "$RUNLOCK";;
	# check if the runlock exists for scripting
	has) [ -e "$RUNLOCK" ]; exit $?;;
	# check if the lock does not exist
	not) [ ! -e "$RUNLOCK" ]; exit $?;;
	# wait until the lock finishes
	wait)
		TIME=$LOCK

		for LOCK in $@; do
			pidwait $(runlock get $LOCK ${TIME:-20})
		done;;
	# get the runlock creation time
	time) [ -e "$RUNLOCK" ] && stat -c %y "$RUNLOCK";;
	# otherwise you did something wrong
	*) echo "$NLHDR
	Not a valid runlock action.
	" && exit;;
esac
